load("@rules_cc//cc:defs.bzl", "cc_library", "cc_test")

package(features = ["layering_check"])

cc_library(
    name = "check_compat",
    testonly = True,
    hdrs = ["check_compat.h"],
)

cc_library(
    name = "run_auto_test",
    testonly = True,
    hdrs = ["run_auto_test.h"],
)

flaky_tests = {
    "crypto_core_test": True,
    "lan_discovery_test": True,
    "save_load_test": True,
    "tox_many_tcp_test": True,
}

[cc_test(
    name = src[:src.rindex(".")-len(src)],
    size = "small",
    srcs = [src],
    args = ["$(location %s)" % src],
    data = glob(["data/*"]),
    flaky = flaky_tests.get(
        src[:-2],
        False,
    ),
    deps = [
        ":check_compat",
        ":run_auto_test",
        "//c-toxcore/testing:misc_tools",
        "//c-toxcore/toxav",
        "//c-toxcore/toxcore",
        "//c-toxcore/toxcore:DHT_srcs",
        "//c-toxcore/toxcore:Messenger",
        "//c-toxcore/toxcore:TCP_connection",
        "//c-toxcore/toxcore:ccompat",
        "//c-toxcore/toxcore:crypto_core",
        "//c-toxcore/toxcore:friend_connection",
        "//c-toxcore/toxcore:logger",
        "//c-toxcore/toxcore:mono_time",
        "//c-toxcore/toxcore:net_crypto",
        "//c-toxcore/toxcore:network",
        "//c-toxcore/toxcore:onion",
        "//c-toxcore/toxcore:onion_announce",
        "//c-toxcore/toxcore:onion_client",
        "//c-toxcore/toxencryptsave",
        "@libsodium",
        "@libvpx",
    ],
) for src in glob(["*_test.c*"])]
